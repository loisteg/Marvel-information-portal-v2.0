{"version":3,"sources":["components/comicsList/ComicsList.js","components/pages/ComicsPage.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js"],"names":["setContent","process","Component","newItemLoading","Spinner","ErrorMessage","Error","ComicsList","useState","comicsList","setComicsList","setnewItemLoading","offset","setOffset","comicsEnded","setComicsEnded","useMarvelService","getAllComics","setProcess","useEffect","onRequest","initial","then","onComicsListLoaded","newComicsList","ended","length","className","arr","items","map","item","i","imgStyle","thumbnail","to","id","src","alt","title","price","renderItems","disabled","style","onClick","ComicsPage","Helmet","name","content","AppBanner","_toConsumableArray","Array","isArray","arrayLikeToArray","iter","Symbol","iterator","Object","from","unsupportedIterableToArray","TypeError"],"mappings":"uNAUMA,EAAa,SAACC,EAASC,EAAWC,GACpC,OAAQF,GACJ,IAAK,UACD,OAAO,cAACG,EAAA,EAAO,IACnB,IAAK,UACD,OAAOD,EAAiB,cAACD,EAAS,IAAK,cAACE,EAAA,EAAO,IACnD,IAAK,YACD,OAAO,cAACF,EAAS,IACrB,IAAK,QACD,OAAO,cAACG,EAAA,EAAY,IACxB,QACI,MAAM,IAAIC,MAAM,8BA6EbC,EAzEI,WAEf,MAAoCC,mBAAS,IAAG,mBAAzCC,EAAU,KAAEC,EAAa,KAChC,EAA4CF,oBAAS,GAAM,mBAApDL,EAAc,KAAEQ,EAAiB,KACxC,EAA4BH,mBAAS,GAAE,mBAAhCI,EAAM,KAAEC,EAAS,KACxB,EAAsCL,oBAAS,GAAM,mBAA9CM,EAAW,KAAEC,EAAc,KAElC,EAA4CC,cAArCC,EAAY,EAAZA,aAAchB,EAAO,EAAPA,QAASiB,EAAU,EAAVA,WAE9BC,qBAAU,WACNC,EAAUR,GAAQ,KAEnB,IAEH,IAAMQ,EAAY,SAACR,EAAQS,GACbV,GAAVU,GACAJ,EAAaL,GACRU,KAAKC,GACLD,MAAK,kBAAMJ,EAAW,iBAGzBK,EAAqB,SAACC,GACxB,IAAIC,GAAQ,EACRD,EAAcE,OAAS,IACvBD,GAAQ,GAEZf,EAAc,GAAD,mBAAKD,GAAU,YAAKe,KACjCb,GAAkB,GAClBE,EAAUD,EAAS,GACnBG,EAAeU,IA8BnB,OACI,sBAAKE,UAAU,eAAc,UACxB3B,EAAWC,GAAS,kBA7B7B,SAAsB2B,GAClB,IAAMC,EAAQD,EAAIE,KAAI,SAACC,EAAMC,GACzB,IAAIC,EAAW,CAAC,UAAc,SAM9B,MALuB,wEAAnBF,EAAKG,YACLD,EAAW,CAAC,UAAc,UAK1B,oBACAN,UAAU,eAAc,SAEpB,eAAC,IAAI,CAACQ,GAAE,kBAAaJ,EAAKK,IAAK,UAC3B,qBAAKC,IAAKN,EAAKG,UAAWI,IAAKP,EAAKQ,MAAOZ,UAAS,2BAAsBM,KAC1E,qBAAKN,UAAU,oBAAmB,SAAEI,EAAKQ,QACzC,qBAAKZ,UAAU,qBAAoB,SAAEI,EAAKS,YAJ7CT,EAAKK,OASlB,OACI,oBAAIT,UAAU,eAAc,SACvBE,IAOsBY,CAAYhC,KAAaN,GACpD,wBACIuC,SAAUvC,EACVwC,MAAO,CAAC,QAAY7B,EAAc,OAAS,SAC3Ca,UAAU,mCACViB,QAAS,kBAAMxB,EAAUR,IAAQ,SACjC,qBAAKe,UAAU,QAAO,SAAC,oBCvExBkB,UAhBI,WACf,OACI,qCACI,eAACC,EAAA,EAAM,WACH,sBACIC,KAAK,cACLC,QAAQ,8BAEZ,gCAAO,mBAEX,cAACC,EAAA,EAAS,IACV,cAAC,EAAU,S,wFCZR,SAASC,EAAmBtB,GACzC,OCJa,SAA4BA,GACzC,GAAIuB,MAAMC,QAAQxB,GAAM,OAAO,OAAAyB,EAAA,GAAiBzB,GDGzC,CAAkBA,IELZ,SAA0B0B,GACvC,GAAsB,qBAAXC,QAA0BA,OAAOC,YAAYC,OAAOH,GAAO,OAAOH,MAAMO,KAAKJ,GFIvD,CAAgB1B,IAAQ,OAAA+B,EAAA,GAA2B/B,IGLvE,WACb,MAAM,IAAIgC,UAAU,wIHIwE","file":"static/js/7.58d32773.chunk.js","sourcesContent":["import {useState, useEffect} from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport {CSSTransition, TransitionGroup} from 'react-transition-group'\r\n\r\nimport useMarvelService from '../../services/MarvelService';\r\nimport Spinner from '../spinner/Spinner';\r\nimport ErrorMessage from '../errorMessage/ErrorMessage';\r\n\r\nimport './comicsList.scss';\r\n\r\nconst setContent = (process, Component, newItemLoading) => {\r\n    switch (process) {\r\n        case 'waiting':\r\n            return <Spinner/>;\r\n        case 'loading':\r\n            return newItemLoading ? <Component/> : <Spinner/>;\r\n        case 'confirmed':\r\n            return <Component/>;\r\n        case 'error':\r\n            return <ErrorMessage/>;\r\n        default:\r\n            throw new Error('Unexpected process state');\r\n    }\r\n}\r\n\r\nconst ComicsList = () => {\r\n\r\n    const [comicsList, setComicsList] = useState([]);\r\n    const [newItemLoading, setnewItemLoading] = useState(false);\r\n    const [offset, setOffset] = useState(0);\r\n    const [comicsEnded, setComicsEnded] = useState(false);\r\n\r\n    const {getAllComics, process, setProcess} = useMarvelService();\r\n\r\n    useEffect(() => {\r\n        onRequest(offset, true);\r\n        // eslint-disable-next-line\r\n    }, [])\r\n\r\n    const onRequest = (offset, initial) => {\r\n        initial ? setnewItemLoading(false) : setnewItemLoading(true);\r\n        getAllComics(offset)\r\n            .then(onComicsListLoaded)\r\n            .then(() => setProcess('confirmed'));\r\n    }\r\n\r\n    const onComicsListLoaded = (newComicsList) => {\r\n        let ended = false;\r\n        if (newComicsList.length < 8) {\r\n            ended = true;\r\n        }\r\n        setComicsList([...comicsList, ...newComicsList]);\r\n        setnewItemLoading(false);\r\n        setOffset(offset + 8);\r\n        setComicsEnded(ended);\r\n    }\r\n\r\n    function renderItems (arr) {\r\n        const items = arr.map((item, i) => {\r\n            let imgStyle = {'objectFit' : 'cover'};\r\n            if (item.thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\r\n                imgStyle = {'objectFit' : 'unset'};\r\n            }\r\n\r\n            \r\n            return (\r\n                <li \r\n                className=\"comics__item\"\r\n                key={item.id}>\r\n                    <Link to={`/comics/${item.id}`}>\r\n                        <img src={item.thumbnail} alt={item.title} className={`comics__item-img ${imgStyle}`}/>\r\n                        <div className=\"comics__item-name\">{item.title}</div>\r\n                        <div className=\"comics__item-price\">{item.price}</div>\r\n                    </Link>\r\n                </li>\r\n            )\r\n        });\r\n        return (\r\n            <ul className=\"comics__grid\">\r\n                {items}\r\n            </ul>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <div className=\"comics__list\">\r\n            {setContent(process, () => renderItems(comicsList), newItemLoading)}\r\n            <button \r\n                disabled={newItemLoading} \r\n                style={{'display' : comicsEnded ? 'none' : 'block'}}\r\n                className=\"button button__main button__long\"\r\n                onClick={() => onRequest(offset)}>\r\n                <div className=\"inner\">load more</div>\r\n            </button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ComicsList;","import {Helmet} from 'react-helmet'\r\n\r\nimport AppBanner from \"../appBanner/AppBanner\";\r\nimport ComicsList from \"../comicsList/ComicsList\";\r\n\r\nconst ComicsPage = () => {\r\n    return (\r\n        <>\r\n            <Helmet>\r\n                <meta\r\n                    name=\"description\"\r\n                    content=\"Page with Marvel's comics\"\r\n                />\r\n                <title>Comics Page</title>\r\n            </Helmet>\r\n            <AppBanner/>\r\n            <ComicsList/>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ComicsPage;","import arrayWithoutHoles from \"@babel/runtime/helpers/esm/arrayWithoutHoles\";\nimport iterableToArray from \"@babel/runtime/helpers/esm/iterableToArray\";\nimport unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nimport nonIterableSpread from \"@babel/runtime/helpers/esm/nonIterableSpread\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"@babel/runtime/helpers/esm/arrayLikeToArray\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}"],"sourceRoot":""}